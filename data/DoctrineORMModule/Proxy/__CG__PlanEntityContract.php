<?php

namespace DoctrineORMModule\Proxy\__CG__\Plan\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Contract extends \Plan\Entity\Contract implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Plan\\Entity\\Contract' . "\0" . 'id', '' . "\0" . 'Plan\\Entity\\Contract' . "\0" . 'contractId', '' . "\0" . 'Plan\\Entity\\Contract' . "\0" . 'year', '' . "\0" . 'Plan\\Entity\\Contract' . "\0" . 'organisation', '' . "\0" . 'Plan\\Entity\\Contract' . "\0" . 'plan', '' . "\0" . 'Plan\\Entity\\Contract' . "\0" . 'geography', '' . "\0" . 'Plan\\Entity\\Contract' . "\0" . 'planCost'];
        }

        return ['__isInitialized__', '' . "\0" . 'Plan\\Entity\\Contract' . "\0" . 'id', '' . "\0" . 'Plan\\Entity\\Contract' . "\0" . 'contractId', '' . "\0" . 'Plan\\Entity\\Contract' . "\0" . 'year', '' . "\0" . 'Plan\\Entity\\Contract' . "\0" . 'organisation', '' . "\0" . 'Plan\\Entity\\Contract' . "\0" . 'plan', '' . "\0" . 'Plan\\Entity\\Contract' . "\0" . 'geography', '' . "\0" . 'Plan\\Entity\\Contract' . "\0" . 'planCost'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Contract $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setContractId($contractId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContractId', [$contractId]);

        return parent::setContractId($contractId);
    }

    /**
     * {@inheritDoc}
     */
    public function getContractId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContractId', []);

        return parent::getContractId();
    }

    /**
     * {@inheritDoc}
     */
    public function setYear($year)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setYear', [$year]);

        return parent::setYear($year);
    }

    /**
     * {@inheritDoc}
     */
    public function getYear()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getYear', []);

        return parent::getYear();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrganisation(\Plan\Entity\Organisation $organisation = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrganisation', [$organisation]);

        return parent::setOrganisation($organisation);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrganisation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrganisation', []);

        return parent::getOrganisation();
    }

    /**
     * {@inheritDoc}
     */
    public function addGeography($geography)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addGeography', [$geography]);

        return parent::addGeography($geography);
    }

    /**
     * {@inheritDoc}
     */
    public function removeGeography($geography)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeGeography', [$geography]);

        return parent::removeGeography($geography);
    }

    /**
     * {@inheritDoc}
     */
    public function getGeography()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGeography', []);

        return parent::getGeography();
    }

    /**
     * {@inheritDoc}
     */
    public function addPlan(\Plan\Entity\Plan $plan)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPlan', [$plan]);

        return parent::addPlan($plan);
    }

    /**
     * {@inheritDoc}
     */
    public function removePlan(\Plan\Entity\Plan $plan)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePlan', [$plan]);

        return parent::removePlan($plan);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlan()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlan', []);

        return parent::getPlan();
    }

    /**
     * {@inheritDoc}
     */
    public function getPlanCost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlanCost', []);

        return parent::getPlanCost();
    }

    /**
     * {@inheritDoc}
     */
    public function addPlanCost($planCost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPlanCost', [$planCost]);

        return parent::addPlanCost($planCost);
    }

    /**
     * {@inheritDoc}
     */
    public function removePlanCost($planCost)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePlanCost', [$planCost]);

        return parent::removePlanCost($planCost);
    }

}
